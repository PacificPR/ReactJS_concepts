                                                ******************* JS *********************

JavaScript, often abbreviated as JS, is a programming language that conforms to the ECMAScript specification. 
JavaScript is high-level, often just-in-time compiled, and multi-paradigm. 
It has curly-bracket syntax, dynamic typing, prototype-based object-orientation, and first-class functions.

                              ***** BABEL ****

Babel is a free and open-source JavaScript transcompiler that is mainly used to convert ECMAScript 2015+ code into a backwards compatible version of JavaScript 
that can be run by older JavaScript engines. Babel is a popular tool for using the newest features of the JavaScript programming language.

                             **** ECMAScript(ES) ****

ECMAScript (or ES) is a scripting-language specification standardized by Ecma International.
It was created to standardize JavaScript to help foster multiple independent implementations.


                ******************** ES6 **********************

ECMAScript 6 is also known as ES6 and ECMAScript 2015.

ES6 contains new features and the previous ones till ES5

New features in ES6 :

JavaScript let
JavaScript const
JavaScript Arrow Functions
JavaScript Classes
Default parameter values
Array.find()
Array.findIndex()
Exponentiation (**) (EcmaScript 2016)


## Hoisting :
In JavaScript, a variable can be declared after it has been used.
In other words; a variable can be used before it has been declared.

Eg: 
x = 5; // Assign 5 to x
elem = document.getElementById("demo"); // Find an element
elem.innerHTML = x;                     // Display x in the element
var x; // Declare x

This will work, as while compiling , all the declarations are send to the top , so order of initialization or declaration doesn't matter 

## let vs var : 

var -> a. functional  scope, can be used throughout the fucntion no matter where declared.
       b. var declaration are hoisted 
       c. we can redeclare it 

let -> a. blocked scope, can be only accessed throughout the block where it's declared
       b. let declaration are not hoisted 
       c. can be declare only once

## let vs const 

const and let has same property of blocked scope, non-hoisted and declaring only once

const is used to declare a constant value and remains unchanged throughout.
Though we can change an object property of const, we can't change the object itself


######### ARROW FUNCTION :

const square = function(num){
                    return num*num;
                    }
//IT CAN BE WRITTEN AS:

const squ = (num) => num*num;
//OR
const sq = num => num*num;

// Thus arrow function shortens the function a lot

                                *************** this keyword *********

A function's this keyword behaves a little differently in JavaScript compared to other languages. 
It also has some differences between strict mode and non-strict mode.
In most cases, the value of this is determined by how a function is called (runtime binding).

When inside an object, this references the object that is executing  the current method.
    Eg: 
    const video = { 
        title = 'a',
        play() {
            console.log(this);  // this will reference the video object as it is the one which is executing  the function play
            }   
        };  
                                                                                                  
        
    
***Global context
In the global execution context (outside of any function), this refers to the global object whether in strict mode or not.

***Function context
Inside a function, the value of this depends on how the function is called.

a. Simple call
Since the following code is not in strict mode, and because the value of this is not set by the call, this will default to the global object, which is window in a browser.

b. The bind method
ECMAScript 5 introduced Function.prototype.bind(). Calling f.bind(someObject) creates a new function with the same body and scope as f, 
but where this occurs in the original function, in the new function it is permanently bound to the first argument of bind, regardless of how the function is being used.

c. Arrow functions
In arrow functions, this retains the value of the enclosing lexical context's this. In global code, it will be set to the global object:

## setting default parameter value :

const square = function(num=10){
                    retunr num*num;
                    }
console.log(square()); // O/P: 100
console.log(square(5));// O/P: 25


########### ECMAScript's three dots ( ... ): 
       rest vs Spread operators

    rest is for combining, spread is for spliting
Eg :
    function add(x, y) {
        return x + y;
    }

    add(1, 2, 3, 4, 5) // returns 3

## Rest :
    rest parameters collect all the remaining elements into an array. This allows us to do really neat function definitions
    
    function add(...args) {
        let result = 0;

    for (let arg of args) result += arg;
        return result
    }

    add(1) // returns 1
    add(1,2) // returns 3
    add(1, 2, 3, 4, 5) // returns 15

Note: Rest parameters have to be at the last argument. 
      This is because it collects all remaining/ excess arguments into an array.
      So having a function definition like this does not make sense and it errors out. 

## Spread :

The spread operator allows us to expand elements. 
With rest parameters we were able to get a list of arguments into an array.
spread operators however, let us unpack elements in an array to single/individual arguments.

    function add(...args){
        let result = 0;
        for(let i of args) 
            result += i;
        return result
    }
    let ar = [23,21,12,92]
    add(...ar,1) // Returns sum of all elements of array ar and 1 

#### Copying arrays

We can use the spread operator to copy an array.

const arr = [1, 2, 3];
const arr2 = [...arr];

This copies arr into arr2. Now we can do things on arr2 and any changes done to arr2 will not have any effect arr.


